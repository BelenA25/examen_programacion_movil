// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.network

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class MovieDtoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<MovieDto>() {
  private val options: JsonReader.Options = JsonReader.Options.of("original_title", "overview",
      "poster_path", "release_date", "vote_average")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "voteAverage")

  public override fun toString(): String = buildString(30) {
      append("GeneratedJsonAdapter(").append("MovieDto").append(')') }

  public override fun fromJson(reader: JsonReader): MovieDto {
    var title: String? = null
    var overview: String? = null
    var posterPath: String? = null
    var releaseDate: String? = null
    var voteAverage: Double? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title",
            "original_title", reader)
        1 -> overview = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("overview",
            "overview", reader)
        2 -> posterPath = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("posterPath",
            "poster_path", reader)
        3 -> releaseDate = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("releaseDate", "release_date", reader)
        4 -> voteAverage = doubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("voteAverage", "vote_average", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return MovieDto(
        title = title ?: throw Util.missingProperty("title", "original_title", reader),
        overview = overview ?: throw Util.missingProperty("overview", "overview", reader),
        posterPath = posterPath ?: throw Util.missingProperty("posterPath", "poster_path", reader),
        releaseDate = releaseDate ?: throw Util.missingProperty("releaseDate", "release_date",
            reader),
        voteAverage = voteAverage ?: throw Util.missingProperty("voteAverage", "vote_average",
            reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: MovieDto?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("original_title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("overview")
    stringAdapter.toJson(writer, value_.overview)
    writer.name("poster_path")
    stringAdapter.toJson(writer, value_.posterPath)
    writer.name("release_date")
    stringAdapter.toJson(writer, value_.releaseDate)
    writer.name("vote_average")
    doubleAdapter.toJson(writer, value_.voteAverage)
    writer.endObject()
  }
}
